#!/bin/bash
#SBATCH --time=1:00:00
#SBATCH --nodes=1 
#SBATCH --ntasks-per-node=48
#SBATCH --mem=384000
#SBATCH --job-name=MoS2
#SBATCH --mail-type=END
#SBATCH --account=mleuenberger
#SBATCH --mail-user=d.g.skachkov@gmail.com
#SBATCH --error=error.txt
#SBATCH --output=output.txt
 
module load espresso

export MV2_ENABLE_AFFINITY=0 
export I_MPI_PIN_DOMAIN=auto 
export I_MPI_PIN_ORDER=bunch 
export KMP_AFFINITY=compact,granularity=fine,1 
export OMP_NUM_THREADS=1

echo "SLURM_NTASKS_PER_NODE = $SLURM_NTASKS_PER_NODE" 
echo "SLURM_JOB_NUM_NODES   = $SLURM_JOB_NUM_NODES" 
echo "OMP_NUM_THREADS       = $OMP_NUM_THREADS"

PPN=$(( $SLURM_NTASKS_PER_NODE * $SLURM_JOB_NUM_NODES / $OMP_NUM_THREADS ))
echo "PPN = $PPN"

### Quantum Espresso:
#mpirun -np $PPN pw.x -ni 1 -nk 2 -nt 2 -nd 1 -nb 2 -input scf.in > scf.out
mpirun -np $PPN pw.x -ni 1 -nk 12 -nt 1 -nd 1 -nb 1 -input nscf.in > nscf.out

### DOS
#mpiexec   -ppn $PPN dos.x < dos.in > dos.out

### PDOS 
#mpiexec   -ppn $PPN projwfc.x < kpdos.in > kpdos.out

### Complex band 
#mpiexec   -ppn 16 pwcond.x < cond.in > cond.out

### Quantum Espresso Band structure:
#mpirun -np $PPN pw.x -ni 1 -nk 1 -nt 1 -nd 1 -nb 1 < bands.in > bands.out

### Quantum Espresso Collect Band structure:
#mpirun -np $PPN bands.x < bandsx.in > bandsx.out

### GIPAW hyperfine
#mpiexec   -ppn $PPN gipaw.x < hyperfine.in > hyperfine.out

### GIPAW g-tensor
#mpiexec   -ppn $PPN gipaw.x < g-tensor.in > g-tensor.out

### PP
#mpiexec   -ppn $PPN pp.x < pp.in > pp.out
#mpiexec   -ppn $PPN pp.x < pp_spin2_HOMO_1.in > pp_spin2_HOMO_1.out
#mpiexec   -ppn $PPN pp.x < pp_spin2_HOMO.in > pp_spin2_HOMO.out


